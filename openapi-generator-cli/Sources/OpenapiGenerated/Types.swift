// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// [인증] 조직 카테고리 수정
    ///
    /// 조직에 등록된 카테고리를 수정합니다.
    ///
    /// - Remark: HTTP `PUT /api/v1/organizations/{organizationId}/categories`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/categories/put(modifyCategories)`.
    func modifyCategories(_ input: Operations.modifyCategories.Input) async throws -> Operations.modifyCategories.Output
    /// [인증] 사용자의 가입된 조직 페이징 조회
    ///
    /// 멤버가 가입한 조직 목록을 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/get(getJoined)`.
    func getJoined(_ input: Operations.getJoined.Input) async throws -> Operations.getJoined.Output
    /// [인증] 조직 생성
    ///
    /// 조직을 생성합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/organizations`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/post(create)`.
    func create(_ input: Operations.create.Input) async throws -> Operations.create.Output
    /// [인증] 조직 가입
    ///
    /// 조직에 가입합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/organizations/{organizationId}/join`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/join/post(join)`.
    func join(_ input: Operations.join.Input) async throws -> Operations.join.Output
    /// [인증] 사용자에게 수신된 알림 조회
    ///
    /// 사용자에게 수신된 알림을 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/get(findById)`.
    func findById(_ input: Operations.findById.Input) async throws -> Operations.findById.Output
    /// [인증] 단일 사용자 알림 대기열 추가
    ///
    /// 단일 사용자를 특정하여 노티 알림 대기열에 등록합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/post(create_1)`.
    func create_1(_ input: Operations.create_1.Input) async throws -> Operations.create_1.Output
    /// [인증] 알림 발송 시간 변경
    ///
    /// 노티 알림 발송 시간을 변경합니다.
    ///
    /// - Remark: HTTP `PATCH /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/patch(changeSendTime)`.
    func changeSendTime(_ input: Operations.changeSendTime.Input) async throws -> Operations.changeSendTime.Output
    /// [인증] 조직 단위 알림 대량 발송
    ///
    /// 조직 내 모든 사용자에게 전체 발송되는 알림을 등록합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/notifications/bulk`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/bulk/post(createAll)`.
    func createAll(_ input: Operations.createAll.Input) async throws -> Operations.createAll.Output
    /// 토큰 재발급
    ///
    /// 리프레시 토큰을 이용해 새로운 액세스 토큰을 발급합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/member/reissue`.
    /// - Remark: Generated from `#/paths//api/v1/member/reissue/post(reissue)`.
    func reissue(_ input: Operations.reissue.Input) async throws -> Operations.reissue.Output
    /// 회원 로그인
    ///
    /// 본문에 소셜 공급자명과 인가코드를 넣어 노피스 서버 로그인을 시도합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/member/login`.
    /// - Remark: Generated from `#/paths//api/v1/member/login/post(login)`.
    func login(_ input: Operations.login.Input) async throws -> Operations.login.Output
    /// 컨텐츠 이미지 업로드 위치 요청
    ///
    /// fileType에는 확장자를, fileName은 파일명을 넣어주세요. imageType은 이미지 유형을 명시해주세요.
    ///
    /// - Remark: HTTP `GET /api/v1/image`.
    /// - Remark: Generated from `#/paths//api/v1/image/get(getContentImage)`.
    func getContentImage(_ input: Operations.getContentImage.Input) async throws -> Operations.getContentImage.Output
    /// 컨텐츠 이미지 업로드 완료
    ///
    /// 컨텐츠 이미지 업로드 완료를 노피스 서버에 알립니다.
    ///
    /// - Remark: HTTP `POST /api/v1/image`.
    /// - Remark: Generated from `#/paths//api/v1/image/post(notifyContentImageSaveSuccess)`.
    func notifyContentImageSaveSuccess(_ input: Operations.notifyContentImageSaveSuccess.Input) async throws -> Operations.notifyContentImageSaveSuccess.Output
    /// 노티 생성
    ///
    /// 노티를 생성합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/announcement`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/post(create_2)`.
    func create_2(_ input: Operations.create_2.Input) async throws -> Operations.create_2.Output
    /// [인증] 조직에 발급된 노티 열람
    ///
    /// 열람하려는 노티를 조회하고, 열람 기록에 추가합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/get(read)`.
    func read(_ input: Operations.read.Input) async throws -> Operations.read.Output
    /// [인증] 노티 수정
    ///
    /// 노티를 수정합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/post(update)`.
    func update(_ input: Operations.update.Input) async throws -> Operations.update.Output
    /// [인증] 노티 삭제
    ///
    /// 노티를 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/delete(delete_1)`.
    func delete_1(_ input: Operations.delete_1.Input) async throws -> Operations.delete_1.Output
    /// 투두 수정
    ///
    /// - Remark: HTTP `PATCH /api/v1/tasks`.
    /// - Remark: Generated from `#/paths//api/v1/tasks/patch(modify)`.
    func modify(_ input: Operations.modify.Input) async throws -> Operations.modify.Output
    /// [인증] 조직원 권한 변경
    ///
    /// 타겟에 해당하는 멤버의 조직 내 권한을 입력한 권한대로 변경합니다.
    ///
    /// - Remark: HTTP `PATCH /api/v1/organizations/{organizationId}/roles`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/roles/patch(changeRoles)`.
    func changeRoles(_ input: Operations.changeRoles.Input) async throws -> Operations.changeRoles.Output
    /// 사용자 할당 투두 목록 조회
    ///
    /// - Remark: HTTP `GET /api/v1/tasks/assigned`.
    /// - Remark: Generated from `#/paths//api/v1/tasks/assigned/get(getAssigned)`.
    func getAssigned(_ input: Operations.getAssigned.Input) async throws -> Operations.getAssigned.Output
    /// [인증] 단일 조직 정보 조회
    ///
    /// 조직의 정보(조직명, 가입 대기여부, 가입자수) 를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations/{organizationId}`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/get(getInformation)`.
    func getInformation(_ input: Operations.getInformation.Input) async throws -> Operations.getInformation.Output
    /// [인증] 조직별 노티 페이징 조회
    ///
    /// 조직별 노티를 페이징 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations/{organizationId}/announcements`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/announcements/get(getPublishedAnnouncements)`.
    func getPublishedAnnouncements(_ input: Operations.getPublishedAnnouncements.Input) async throws -> Operations.getPublishedAnnouncements.Output
    /// [인증] 단일 회원 정보 조회
    ///
    /// 회원의 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/member`.
    /// - Remark: Generated from `#/paths//api/v1/member/get(getById)`.
    func getById(_ input: Operations.getById.Input) async throws -> Operations.getById.Output
    /// 서버 상태 확인
    ///
    /// 정상 동작시 200 반환합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/health`.
    /// - Remark: Generated from `#/paths//api/v1/health/get(health)`.
    func health(_ input: Operations.health.Input) async throws -> Operations.health.Output
    /// 전체 카테고리 조회
    ///
    /// 등록 가능한 모든 카테고리를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/category`.
    /// - Remark: Generated from `#/paths//api/v1/category/get(getCategories)`.
    func getCategories(_ input: Operations.getCategories.Input) async throws -> Operations.getCategories.Output
    /// [인증] 노티에 발급된 투두 조회
    ///
    /// 노티에 발급된 투두를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/announcement/{announcementId}/tasks`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/get(getTasksById)`.
    func getTasksById(_ input: Operations.getTasksById.Input) async throws -> Operations.getTasksById.Output
    /// 알림 삭제
    ///
    /// 노티 알림을 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/notifications/{notificationId}`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/{notificationId}/delete(delete)`.
    func delete(_ input: Operations.delete.Input) async throws -> Operations.delete.Output
    /// 노티에 발급된 투두 삭제
    ///
    /// 노티에 발급된 투두를 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/announcement/{announcementId}/tasks/{taskId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/{taskId}/delete(deleteTaskById)`.
    func deleteTaskById(_ input: Operations.deleteTaskById.Input) async throws -> Operations.deleteTaskById.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// [인증] 조직 카테고리 수정
    ///
    /// 조직에 등록된 카테고리를 수정합니다.
    ///
    /// - Remark: HTTP `PUT /api/v1/organizations/{organizationId}/categories`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/categories/put(modifyCategories)`.
    public func modifyCategories(
        path: Operations.modifyCategories.Input.Path,
        query: Operations.modifyCategories.Input.Query,
        headers: Operations.modifyCategories.Input.Headers = .init(),
        body: Operations.modifyCategories.Input.Body
    ) async throws -> Operations.modifyCategories.Output {
        try await modifyCategories(Operations.modifyCategories.Input(
            path: path,
            query: query,
            headers: headers,
            body: body
        ))
    }
    /// [인증] 사용자의 가입된 조직 페이징 조회
    ///
    /// 멤버가 가입한 조직 목록을 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/get(getJoined)`.
    public func getJoined(
        query: Operations.getJoined.Input.Query,
        headers: Operations.getJoined.Input.Headers = .init()
    ) async throws -> Operations.getJoined.Output {
        try await getJoined(Operations.getJoined.Input(
            query: query,
            headers: headers
        ))
    }
    /// [인증] 조직 생성
    ///
    /// 조직을 생성합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/organizations`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/post(create)`.
    public func create(
        headers: Operations.create.Input.Headers = .init(),
        body: Operations.create.Input.Body
    ) async throws -> Operations.create.Output {
        try await create(Operations.create.Input(
            headers: headers,
            body: body
        ))
    }
    /// [인증] 조직 가입
    ///
    /// 조직에 가입합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/organizations/{organizationId}/join`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/join/post(join)`.
    public func join(
        path: Operations.join.Input.Path,
        headers: Operations.join.Input.Headers = .init()
    ) async throws -> Operations.join.Output {
        try await join(Operations.join.Input(
            path: path,
            headers: headers
        ))
    }
    /// [인증] 사용자에게 수신된 알림 조회
    ///
    /// 사용자에게 수신된 알림을 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/get(findById)`.
    public func findById(headers: Operations.findById.Input.Headers = .init()) async throws -> Operations.findById.Output {
        try await findById(Operations.findById.Input(headers: headers))
    }
    /// [인증] 단일 사용자 알림 대기열 추가
    ///
    /// 단일 사용자를 특정하여 노티 알림 대기열에 등록합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/post(create_1)`.
    public func create_1(
        headers: Operations.create_1.Input.Headers = .init(),
        body: Operations.create_1.Input.Body
    ) async throws -> Operations.create_1.Output {
        try await create_1(Operations.create_1.Input(
            headers: headers,
            body: body
        ))
    }
    /// [인증] 알림 발송 시간 변경
    ///
    /// 노티 알림 발송 시간을 변경합니다.
    ///
    /// - Remark: HTTP `PATCH /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/patch(changeSendTime)`.
    public func changeSendTime(
        headers: Operations.changeSendTime.Input.Headers = .init(),
        body: Operations.changeSendTime.Input.Body
    ) async throws -> Operations.changeSendTime.Output {
        try await changeSendTime(Operations.changeSendTime.Input(
            headers: headers,
            body: body
        ))
    }
    /// [인증] 조직 단위 알림 대량 발송
    ///
    /// 조직 내 모든 사용자에게 전체 발송되는 알림을 등록합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/notifications/bulk`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/bulk/post(createAll)`.
    public func createAll(
        headers: Operations.createAll.Input.Headers = .init(),
        body: Operations.createAll.Input.Body
    ) async throws -> Operations.createAll.Output {
        try await createAll(Operations.createAll.Input(
            headers: headers,
            body: body
        ))
    }
    /// 토큰 재발급
    ///
    /// 리프레시 토큰을 이용해 새로운 액세스 토큰을 발급합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/member/reissue`.
    /// - Remark: Generated from `#/paths//api/v1/member/reissue/post(reissue)`.
    public func reissue(headers: Operations.reissue.Input.Headers = .init()) async throws -> Operations.reissue.Output {
        try await reissue(Operations.reissue.Input(headers: headers))
    }
    /// 회원 로그인
    ///
    /// 본문에 소셜 공급자명과 인가코드를 넣어 노피스 서버 로그인을 시도합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/member/login`.
    /// - Remark: Generated from `#/paths//api/v1/member/login/post(login)`.
    public func login(
        headers: Operations.login.Input.Headers = .init(),
        body: Operations.login.Input.Body
    ) async throws -> Operations.login.Output {
        try await login(Operations.login.Input(
            headers: headers,
            body: body
        ))
    }
    /// 컨텐츠 이미지 업로드 위치 요청
    ///
    /// fileType에는 확장자를, fileName은 파일명을 넣어주세요. imageType은 이미지 유형을 명시해주세요.
    ///
    /// - Remark: HTTP `GET /api/v1/image`.
    /// - Remark: Generated from `#/paths//api/v1/image/get(getContentImage)`.
    public func getContentImage(
        query: Operations.getContentImage.Input.Query,
        headers: Operations.getContentImage.Input.Headers = .init()
    ) async throws -> Operations.getContentImage.Output {
        try await getContentImage(Operations.getContentImage.Input(
            query: query,
            headers: headers
        ))
    }
    /// 컨텐츠 이미지 업로드 완료
    ///
    /// 컨텐츠 이미지 업로드 완료를 노피스 서버에 알립니다.
    ///
    /// - Remark: HTTP `POST /api/v1/image`.
    /// - Remark: Generated from `#/paths//api/v1/image/post(notifyContentImageSaveSuccess)`.
    public func notifyContentImageSaveSuccess(body: Operations.notifyContentImageSaveSuccess.Input.Body) async throws -> Operations.notifyContentImageSaveSuccess.Output {
        try await notifyContentImageSaveSuccess(Operations.notifyContentImageSaveSuccess.Input(body: body))
    }
    /// 노티 생성
    ///
    /// 노티를 생성합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/announcement`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/post(create_2)`.
    public func create_2(
        headers: Operations.create_2.Input.Headers = .init(),
        body: Operations.create_2.Input.Body
    ) async throws -> Operations.create_2.Output {
        try await create_2(Operations.create_2.Input(
            headers: headers,
            body: body
        ))
    }
    /// [인증] 조직에 발급된 노티 열람
    ///
    /// 열람하려는 노티를 조회하고, 열람 기록에 추가합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/get(read)`.
    public func read(
        path: Operations.read.Input.Path,
        headers: Operations.read.Input.Headers = .init()
    ) async throws -> Operations.read.Output {
        try await read(Operations.read.Input(
            path: path,
            headers: headers
        ))
    }
    /// [인증] 노티 수정
    ///
    /// 노티를 수정합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/post(update)`.
    public func update(
        path: Operations.update.Input.Path,
        headers: Operations.update.Input.Headers = .init(),
        body: Operations.update.Input.Body
    ) async throws -> Operations.update.Output {
        try await update(Operations.update.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// [인증] 노티 삭제
    ///
    /// 노티를 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/delete(delete_1)`.
    public func delete_1(
        path: Operations.delete_1.Input.Path,
        headers: Operations.delete_1.Input.Headers = .init()
    ) async throws -> Operations.delete_1.Output {
        try await delete_1(Operations.delete_1.Input(
            path: path,
            headers: headers
        ))
    }
    /// 투두 수정
    ///
    /// - Remark: HTTP `PATCH /api/v1/tasks`.
    /// - Remark: Generated from `#/paths//api/v1/tasks/patch(modify)`.
    public func modify(
        query: Operations.modify.Input.Query,
        headers: Operations.modify.Input.Headers = .init()
    ) async throws -> Operations.modify.Output {
        try await modify(Operations.modify.Input(
            query: query,
            headers: headers
        ))
    }
    /// [인증] 조직원 권한 변경
    ///
    /// 타겟에 해당하는 멤버의 조직 내 권한을 입력한 권한대로 변경합니다.
    ///
    /// - Remark: HTTP `PATCH /api/v1/organizations/{organizationId}/roles`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/roles/patch(changeRoles)`.
    public func changeRoles(
        path: Operations.changeRoles.Input.Path,
        headers: Operations.changeRoles.Input.Headers = .init(),
        body: Operations.changeRoles.Input.Body
    ) async throws -> Operations.changeRoles.Output {
        try await changeRoles(Operations.changeRoles.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
    /// 사용자 할당 투두 목록 조회
    ///
    /// - Remark: HTTP `GET /api/v1/tasks/assigned`.
    /// - Remark: Generated from `#/paths//api/v1/tasks/assigned/get(getAssigned)`.
    public func getAssigned(
        query: Operations.getAssigned.Input.Query,
        headers: Operations.getAssigned.Input.Headers = .init()
    ) async throws -> Operations.getAssigned.Output {
        try await getAssigned(Operations.getAssigned.Input(
            query: query,
            headers: headers
        ))
    }
    /// [인증] 단일 조직 정보 조회
    ///
    /// 조직의 정보(조직명, 가입 대기여부, 가입자수) 를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations/{organizationId}`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/get(getInformation)`.
    public func getInformation(
        path: Operations.getInformation.Input.Path,
        headers: Operations.getInformation.Input.Headers = .init()
    ) async throws -> Operations.getInformation.Output {
        try await getInformation(Operations.getInformation.Input(
            path: path,
            headers: headers
        ))
    }
    /// [인증] 조직별 노티 페이징 조회
    ///
    /// 조직별 노티를 페이징 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations/{organizationId}/announcements`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/announcements/get(getPublishedAnnouncements)`.
    public func getPublishedAnnouncements(
        path: Operations.getPublishedAnnouncements.Input.Path,
        query: Operations.getPublishedAnnouncements.Input.Query,
        headers: Operations.getPublishedAnnouncements.Input.Headers = .init()
    ) async throws -> Operations.getPublishedAnnouncements.Output {
        try await getPublishedAnnouncements(Operations.getPublishedAnnouncements.Input(
            path: path,
            query: query,
            headers: headers
        ))
    }
    /// [인증] 단일 회원 정보 조회
    ///
    /// 회원의 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/member`.
    /// - Remark: Generated from `#/paths//api/v1/member/get(getById)`.
    public func getById(headers: Operations.getById.Input.Headers = .init()) async throws -> Operations.getById.Output {
        try await getById(Operations.getById.Input(headers: headers))
    }
    /// 서버 상태 확인
    ///
    /// 정상 동작시 200 반환합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/health`.
    /// - Remark: Generated from `#/paths//api/v1/health/get(health)`.
    public func health() async throws -> Operations.health.Output {
        try await health(Operations.health.Input())
    }
    /// 전체 카테고리 조회
    ///
    /// 등록 가능한 모든 카테고리를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/category`.
    /// - Remark: Generated from `#/paths//api/v1/category/get(getCategories)`.
    public func getCategories(headers: Operations.getCategories.Input.Headers = .init()) async throws -> Operations.getCategories.Output {
        try await getCategories(Operations.getCategories.Input(headers: headers))
    }
    /// [인증] 노티에 발급된 투두 조회
    ///
    /// 노티에 발급된 투두를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/announcement/{announcementId}/tasks`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/get(getTasksById)`.
    public func getTasksById(
        path: Operations.getTasksById.Input.Path,
        headers: Operations.getTasksById.Input.Headers = .init()
    ) async throws -> Operations.getTasksById.Output {
        try await getTasksById(Operations.getTasksById.Input(
            path: path,
            headers: headers
        ))
    }
    /// 알림 삭제
    ///
    /// 노티 알림을 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/notifications/{notificationId}`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/{notificationId}/delete(delete)`.
    public func delete(
        path: Operations.delete.Input.Path,
        headers: Operations.delete.Input.Headers = .init()
    ) async throws -> Operations.delete.Output {
        try await delete(Operations.delete.Input(
            path: path,
            headers: headers
        ))
    }
    /// 노티에 발급된 투두 삭제
    ///
    /// 노티에 발급된 투두를 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/announcement/{announcementId}/tasks/{taskId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/{taskId}/delete(deleteTaskById)`.
    public func deleteTaskById(
        path: Operations.deleteTaskById.Input.Path,
        headers: Operations.deleteTaskById.Input.Headers = .init()
    ) async throws -> Operations.deleteTaskById.Output {
        try await deleteTaskById(Operations.deleteTaskById.Input(
            path: path,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    /// local server
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "http://localhost:8080",
            variables: []
        )
    }
    /// develop server
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.noffice.store",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/SortObject`.
        public struct SortObjectPayload: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SortObject/sorted`.
            public var sorted: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SortObject/unsorted`.
            public var unsorted: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SortObject/empty`.
            public var empty: Swift.String?
            /// Creates a new `SortObjectPayload`.
            ///
            /// - Parameters:
            ///   - sorted:
            ///   - unsorted:
            ///   - empty:
            public init(
                sorted: Swift.String? = nil,
                unsorted: Swift.String? = nil,
                empty: Swift.String? = nil
            ) {
                self.sorted = sorted
                self.unsorted = unsorted
                self.empty = empty
            }
            public enum CodingKeys: String, CodingKey {
                case sorted
                case unsorted
                case empty
            }
        }
        /// - Remark: Generated from `#/components/schemas/SortObject`.
        public typealias SortObject = [Components.Schemas.SortObjectPayload]
        /// - Remark: Generated from `#/components/schemas/CategoryModifyRequest`.
        public struct CategoryModifyRequest: Codable, Hashable, Sendable {
            /// 수정하려는 카테고리 ID 목록
            ///
            /// - Remark: Generated from `#/components/schemas/CategoryModifyRequest/categoryIds`.
            public var categoryIds: [Swift.Int64]
            /// Creates a new `CategoryModifyRequest`.
            ///
            /// - Parameters:
            ///   - categoryIds: 수정하려는 카테고리 ID 목록
            public init(categoryIds: [Swift.Int64]) {
                self.categoryIds = categoryIds
            }
            public enum CodingKeys: String, CodingKey {
                case categoryIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/CategoryModifyResponse`.
        public struct CategoryModifyResponse: Codable, Hashable, Sendable {
            /// 카테고리 수정된 조직 식별자
            ///
            /// - Remark: Generated from `#/components/schemas/CategoryModifyResponse/organizationId`.
            public var organizationId: Swift.Int64
            /// 카테고리 수정된 조직 이름
            ///
            /// - Remark: Generated from `#/components/schemas/CategoryModifyResponse/organizationName`.
            public var organizationName: Swift.String
            /// - Remark: Generated from `#/components/schemas/CategoryModifyResponse/categories`.
            public var categories: Components.Schemas.CategoryResponses?
            /// Creates a new `CategoryModifyResponse`.
            ///
            /// - Parameters:
            ///   - organizationId: 카테고리 수정된 조직 식별자
            ///   - organizationName: 카테고리 수정된 조직 이름
            ///   - categories:
            public init(
                organizationId: Swift.Int64,
                organizationName: Swift.String,
                categories: Components.Schemas.CategoryResponses? = nil
            ) {
                self.organizationId = organizationId
                self.organizationName = organizationName
                self.categories = categories
            }
            public enum CodingKeys: String, CodingKey {
                case organizationId
                case organizationName
                case categories
            }
        }
        /// - Remark: Generated from `#/components/schemas/CategoryResponse`.
        public struct CategoryResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CategoryResponse/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CategoryResponse/name`.
            public var name: Swift.String?
            /// Creates a new `CategoryResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// 변경된 카테고리 목록
        ///
        /// - Remark: Generated from `#/components/schemas/CategoryResponses`.
        public struct CategoryResponses: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CategoryResponses/categories`.
            public var categories: [Components.Schemas.CategoryResponse]?
            /// Creates a new `CategoryResponses`.
            ///
            /// - Parameters:
            ///   - categories:
            public init(categories: [Components.Schemas.CategoryResponse]? = nil) {
                self.categories = categories
            }
            public enum CodingKeys: String, CodingKey {
                case categories
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryModifyResponse`.
        public struct NofficeResponseCategoryModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryModifyResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryModifyResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryModifyResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryModifyResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryModifyResponse/data`.
            public var data: Components.Schemas.CategoryModifyResponse?
            /// Creates a new `NofficeResponseCategoryModifyResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.CategoryModifyResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrganizationCreateRequest`.
        public struct OrganizationCreateRequest: Codable, Hashable, Sendable {
            /// 조직 이름
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateRequest/name`.
            public var name: Swift.String
            /// 카테고리 ID 목록
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateRequest/categoryList`.
            public var categoryList: [Swift.Int64]
            /// 조직 커버 이미지 URL
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateRequest/profileImage`.
            public var profileImage: Swift.String?
            /// 조직 활동 마감일자
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateRequest/endAt`.
            public var endAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateRequest/promotionCode`.
            public var promotionCode: Components.Schemas.PromotionVerifyRequest?
            /// Creates a new `OrganizationCreateRequest`.
            ///
            /// - Parameters:
            ///   - name: 조직 이름
            ///   - categoryList: 카테고리 ID 목록
            ///   - profileImage: 조직 커버 이미지 URL
            ///   - endAt: 조직 활동 마감일자
            ///   - promotionCode:
            public init(
                name: Swift.String,
                categoryList: [Swift.Int64],
                profileImage: Swift.String? = nil,
                endAt: Foundation.Date? = nil,
                promotionCode: Components.Schemas.PromotionVerifyRequest? = nil
            ) {
                self.name = name
                self.categoryList = categoryList
                self.profileImage = profileImage
                self.endAt = endAt
                self.promotionCode = promotionCode
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case categoryList
                case profileImage
                case endAt
                case promotionCode
            }
        }
        /// 프로모션 코드 문자열
        ///
        /// - Remark: Generated from `#/components/schemas/PromotionVerifyRequest`.
        public struct PromotionVerifyRequest: Codable, Hashable, Sendable {
            /// 프로모션 코드 문자열
            ///
            /// - Remark: Generated from `#/components/schemas/PromotionVerifyRequest/promotionCode`.
            public var promotionCode: Swift.String?
            /// Creates a new `PromotionVerifyRequest`.
            ///
            /// - Parameters:
            ///   - promotionCode: 프로모션 코드 문자열
            public init(promotionCode: Swift.String? = nil) {
                self.promotionCode = promotionCode
            }
            public enum CodingKeys: String, CodingKey {
                case promotionCode
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationCreateResponse`.
        public struct NofficeResponseOrganizationCreateResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationCreateResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationCreateResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationCreateResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationCreateResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationCreateResponse/data`.
            public var data: Components.Schemas.OrganizationCreateResponse?
            /// Creates a new `NofficeResponseOrganizationCreateResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.OrganizationCreateResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrganizationCreateResponse`.
        public struct OrganizationCreateResponse: Codable, Hashable, Sendable {
            /// 조직 ID
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateResponse/id`.
            public var id: Swift.Int64
            /// 조직 이름
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateResponse/name`.
            public var name: Swift.String
            /// 조직 활동 마감일자
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateResponse/endAt`.
            public var endAt: Foundation.Date?
            /// 조직 커버 이미지 URL
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateResponse/profileImage`.
            public var profileImage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OrganizationCreateResponse/promotion`.
            public var promotion: Components.Schemas.PromotionVerifyResponse?
            /// Creates a new `OrganizationCreateResponse`.
            ///
            /// - Parameters:
            ///   - id: 조직 ID
            ///   - name: 조직 이름
            ///   - endAt: 조직 활동 마감일자
            ///   - profileImage: 조직 커버 이미지 URL
            ///   - promotion:
            public init(
                id: Swift.Int64,
                name: Swift.String,
                endAt: Foundation.Date? = nil,
                profileImage: Swift.String? = nil,
                promotion: Components.Schemas.PromotionVerifyResponse? = nil
            ) {
                self.id = id
                self.name = name
                self.endAt = endAt
                self.profileImage = profileImage
                self.promotion = promotion
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case endAt
                case profileImage
                case promotion
            }
        }
        /// 프로모션 진행 여부
        ///
        /// - Remark: Generated from `#/components/schemas/PromotionVerifyResponse`.
        public struct PromotionVerifyResponse: Codable, Hashable, Sendable {
            /// 프로모션 ID
            ///
            /// - Remark: Generated from `#/components/schemas/PromotionVerifyResponse/promotionId`.
            public var promotionId: Swift.Int64?
            /// 프로모션 이름
            ///
            /// - Remark: Generated from `#/components/schemas/PromotionVerifyResponse/promotionName`.
            public var promotionName: Swift.String?
            /// 프로모션 코드 문자열
            ///
            /// - Remark: Generated from `#/components/schemas/PromotionVerifyResponse/promotionCode`.
            public var promotionCode: Swift.String?
            /// 프로모션 진행 여부
            ///
            /// - Remark: Generated from `#/components/schemas/PromotionVerifyResponse/isVerified`.
            public var isVerified: Swift.Bool?
            /// Creates a new `PromotionVerifyResponse`.
            ///
            /// - Parameters:
            ///   - promotionId: 프로모션 ID
            ///   - promotionName: 프로모션 이름
            ///   - promotionCode: 프로모션 코드 문자열
            ///   - isVerified: 프로모션 진행 여부
            public init(
                promotionId: Swift.Int64? = nil,
                promotionName: Swift.String? = nil,
                promotionCode: Swift.String? = nil,
                isVerified: Swift.Bool? = nil
            ) {
                self.promotionId = promotionId
                self.promotionName = promotionName
                self.promotionCode = promotionCode
                self.isVerified = isVerified
            }
            public enum CodingKeys: String, CodingKey {
                case promotionId
                case promotionName
                case promotionCode
                case isVerified
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationJoinResponse`.
        public struct NofficeResponseOrganizationJoinResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationJoinResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationJoinResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationJoinResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationJoinResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationJoinResponse/data`.
            public var data: Components.Schemas.OrganizationJoinResponse?
            /// Creates a new `NofficeResponseOrganizationJoinResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.OrganizationJoinResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrganizationJoinResponse`.
        public struct OrganizationJoinResponse: Codable, Hashable, Sendable {
            /// 조직 ID
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationJoinResponse/organizationId`.
            public var organizationId: Swift.Int64
            /// 조직 이름
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationJoinResponse/organizationName`.
            public var organizationName: Swift.String?
            /// 가입한 사용자 식별자
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationJoinResponse/memberId`.
            public var memberId: Swift.Int64
            /// Creates a new `OrganizationJoinResponse`.
            ///
            /// - Parameters:
            ///   - organizationId: 조직 ID
            ///   - organizationName: 조직 이름
            ///   - memberId: 가입한 사용자 식별자
            public init(
                organizationId: Swift.Int64,
                organizationName: Swift.String? = nil,
                memberId: Swift.Int64
            ) {
                self.organizationId = organizationId
                self.organizationName = organizationName
                self.memberId = memberId
            }
            public enum CodingKeys: String, CodingKey {
                case organizationId
                case organizationName
                case memberId
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotificationRequest`.
        public struct NotificationRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NotificationRequest/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/NotificationRequest/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotificationRequest/memberId`.
            public var memberId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/NotificationRequest/sendAt`.
            public var sendAt: Foundation.Date
            /// Creates a new `NotificationRequest`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - content:
            ///   - memberId:
            ///   - sendAt:
            public init(
                title: Swift.String,
                content: Swift.String? = nil,
                memberId: Swift.Int64,
                sendAt: Foundation.Date
            ) {
                self.title = title
                self.content = content
                self.memberId = memberId
                self.sendAt = sendAt
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case content
                case memberId
                case sendAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseVoid`.
        public struct NofficeResponseVoid: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseVoid/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseVoid/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseVoid/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseVoid/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseVoid/data`.
            public var data: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `NofficeResponseVoid`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotificationBulkRequest`.
        public struct NotificationBulkRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NotificationBulkRequest/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotificationBulkRequest/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotificationBulkRequest/announcementId`.
            public var announcementId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/NotificationBulkRequest/noticeBefore`.
            public var noticeBefore: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/NotificationBulkRequest/noticeDate`.
            public var noticeDate: [Swift.String]?
            /// Creates a new `NotificationBulkRequest`.
            ///
            /// - Parameters:
            ///   - title:
            ///   - content:
            ///   - announcementId:
            ///   - noticeBefore:
            ///   - noticeDate:
            public init(
                title: Swift.String? = nil,
                content: Swift.String? = nil,
                announcementId: Swift.Int64? = nil,
                noticeBefore: [Swift.String]? = nil,
                noticeDate: [Swift.String]? = nil
            ) {
                self.title = title
                self.content = content
                self.announcementId = announcementId
                self.noticeBefore = noticeBefore
                self.noticeDate = noticeDate
            }
            public enum CodingKeys: String, CodingKey {
                case title
                case content
                case announcementId
                case noticeBefore
                case noticeDate
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseTokenResponse`.
        public struct NofficeResponseTokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTokenResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTokenResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTokenResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTokenResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTokenResponse/data`.
            public var data: Components.Schemas.TokenResponse?
            /// Creates a new `NofficeResponseTokenResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.TokenResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TokenResponse`.
        public struct TokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TokenResponse/accessToken`.
            public var accessToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TokenResponse/refreshToken`.
            public var refreshToken: Swift.String?
            /// Creates a new `TokenResponse`.
            ///
            /// - Parameters:
            ///   - accessToken:
            ///   - refreshToken:
            public init(
                accessToken: Swift.String? = nil,
                refreshToken: Swift.String? = nil
            ) {
                self.accessToken = accessToken
                self.refreshToken = refreshToken
            }
            public enum CodingKeys: String, CodingKey {
                case accessToken
                case refreshToken
            }
        }
        /// - Remark: Generated from `#/components/schemas/SocialAuthRequest`.
        public struct SocialAuthRequest: Codable, Hashable, Sendable {
            /// 소셜 로그인 제공자
            ///
            /// - Remark: Generated from `#/components/schemas/SocialAuthRequest/provider`.
            @frozen public enum providerPayload: String, Codable, Hashable, Sendable {
                case GOOGLE = "GOOGLE"
                case APPLE = "APPLE"
            }
            /// 소셜 로그인 제공자
            ///
            /// - Remark: Generated from `#/components/schemas/SocialAuthRequest/provider`.
            public var provider: Components.Schemas.SocialAuthRequest.providerPayload
            /// 제공자로부터 얻은 사용자별 인가 코드
            ///
            /// - Remark: Generated from `#/components/schemas/SocialAuthRequest/code`.
            public var code: Swift.String
            /// Creates a new `SocialAuthRequest`.
            ///
            /// - Parameters:
            ///   - provider: 소셜 로그인 제공자
            ///   - code: 제공자로부터 얻은 사용자별 인가 코드
            public init(
                provider: Components.Schemas.SocialAuthRequest.providerPayload,
                code: Swift.String
            ) {
                self.provider = provider
                self.code = code
            }
            public enum CodingKeys: String, CodingKey {
                case provider
                case code
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseSocialAuthResponse`.
        public struct NofficeResponseSocialAuthResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSocialAuthResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSocialAuthResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSocialAuthResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSocialAuthResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSocialAuthResponse/data`.
            public var data: Components.Schemas.SocialAuthResponse?
            /// Creates a new `NofficeResponseSocialAuthResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.SocialAuthResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/SocialAuthResponse`.
        public struct SocialAuthResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SocialAuthResponse/memberId`.
            public var memberId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SocialAuthResponse/memberName`.
            public var memberName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SocialAuthResponse/provider`.
            @frozen public enum providerPayload: String, Codable, Hashable, Sendable {
                case GOOGLE = "GOOGLE"
                case APPLE = "APPLE"
            }
            /// - Remark: Generated from `#/components/schemas/SocialAuthResponse/provider`.
            public var provider: Components.Schemas.SocialAuthResponse.providerPayload?
            /// - Remark: Generated from `#/components/schemas/SocialAuthResponse/token`.
            public var token: Components.Schemas.TokenResponse?
            /// Creates a new `SocialAuthResponse`.
            ///
            /// - Parameters:
            ///   - memberId:
            ///   - memberName:
            ///   - provider:
            ///   - token:
            public init(
                memberId: Swift.Int64? = nil,
                memberName: Swift.String? = nil,
                provider: Components.Schemas.SocialAuthResponse.providerPayload? = nil,
                token: Components.Schemas.TokenResponse? = nil
            ) {
                self.memberId = memberId
                self.memberName = memberName
                self.provider = provider
                self.token = token
            }
            public enum CodingKeys: String, CodingKey {
                case memberId
                case memberName
                case provider
                case token
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotifyContentImageSaveSuccessRequest`.
        public struct NotifyContentImageSaveSuccessRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NotifyContentImageSaveSuccessRequest/fileName`.
            public var fileName: Swift.String?
            /// Creates a new `NotifyContentImageSaveSuccessRequest`.
            ///
            /// - Parameters:
            ///   - fileName:
            public init(fileName: Swift.String? = nil) {
                self.fileName = fileName
            }
            public enum CodingKeys: String, CodingKey {
                case fileName
            }
        }
        /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest`.
        public struct AnnouncementCreateRequest: Codable, Hashable, Sendable {
            /// 조직 ID
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/organizationId`.
            public var organizationId: Swift.Int64
            /// 공지 발행자 ID
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/memberId`.
            public var memberId: Swift.Int64
            /// 공지 제목
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/title`.
            public var title: Swift.String
            /// 공지 내용
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/content`.
            public var content: Swift.String
            /// 프로필 이미지 URL
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/profileImageUrl`.
            public var profileImageUrl: Swift.String?
            /// 장소 링크 이름
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/placeLinkName`.
            public var placeLinkName: Swift.String?
            /// 장소 링크 URL
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/placeLinkUrl`.
            public var placeLinkUrl: Swift.String?
            /// 장소 대면/비대면 여부
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/isFaceToFace`.
            public var isFaceToFace: Swift.Bool?
            /// 투두 목록
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/tasks`.
            public var tasks: [Components.Schemas.TaskCreateRequest]?
            /// 활동 진행 만료일
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/endAt`.
            public var endAt: Swift.String
            /// 리마인드 알림 시간(초 단위)
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/noticeBefore`.
            public var noticeBefore: [Swift.String]
            /// 리마인드 알림 기준시간
            ///
            /// - Remark: Generated from `#/components/schemas/AnnouncementCreateRequest/noticeDate`.
            public var noticeDate: [Swift.String]
            /// Creates a new `AnnouncementCreateRequest`.
            ///
            /// - Parameters:
            ///   - organizationId: 조직 ID
            ///   - memberId: 공지 발행자 ID
            ///   - title: 공지 제목
            ///   - content: 공지 내용
            ///   - profileImageUrl: 프로필 이미지 URL
            ///   - placeLinkName: 장소 링크 이름
            ///   - placeLinkUrl: 장소 링크 URL
            ///   - isFaceToFace: 장소 대면/비대면 여부
            ///   - tasks: 투두 목록
            ///   - endAt: 활동 진행 만료일
            ///   - noticeBefore: 리마인드 알림 시간(초 단위)
            ///   - noticeDate: 리마인드 알림 기준시간
            public init(
                organizationId: Swift.Int64,
                memberId: Swift.Int64,
                title: Swift.String,
                content: Swift.String,
                profileImageUrl: Swift.String? = nil,
                placeLinkName: Swift.String? = nil,
                placeLinkUrl: Swift.String? = nil,
                isFaceToFace: Swift.Bool? = nil,
                tasks: [Components.Schemas.TaskCreateRequest]? = nil,
                endAt: Swift.String,
                noticeBefore: [Swift.String],
                noticeDate: [Swift.String]
            ) {
                self.organizationId = organizationId
                self.memberId = memberId
                self.title = title
                self.content = content
                self.profileImageUrl = profileImageUrl
                self.placeLinkName = placeLinkName
                self.placeLinkUrl = placeLinkUrl
                self.isFaceToFace = isFaceToFace
                self.tasks = tasks
                self.endAt = endAt
                self.noticeBefore = noticeBefore
                self.noticeDate = noticeDate
            }
            public enum CodingKeys: String, CodingKey {
                case organizationId
                case memberId
                case title
                case content
                case profileImageUrl
                case placeLinkName
                case placeLinkUrl
                case isFaceToFace
                case tasks
                case endAt
                case noticeBefore
                case noticeDate
            }
        }
        /// 투두 목록
        ///
        /// - Remark: Generated from `#/components/schemas/TaskCreateRequest`.
        public struct TaskCreateRequest: Codable, Hashable, Sendable {
            /// 투두 항목
            ///
            /// - Remark: Generated from `#/components/schemas/TaskCreateRequest/content`.
            public var content: Swift.String
            /// Creates a new `TaskCreateRequest`.
            ///
            /// - Parameters:
            ///   - content: 투두 항목
            public init(content: Swift.String) {
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case content
            }
        }
        /// - Remark: Generated from `#/components/schemas/AnnouncementResponse`.
        public struct AnnouncementResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/organizationId`.
            public var organizationId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/memberId`.
            public var memberId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/announcementId`.
            public var announcementId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/profileImageUrl`.
            public var profileImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/placeLinkName`.
            public var placeLinkName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/placeLinkUrl`.
            public var placeLinkUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/endAt`.
            public var endAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/noticeAt`.
            public var noticeAt: [Foundation.Date]?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/createdAt`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AnnouncementResponse/updatedAt`.
            public var updatedAt: Foundation.Date?
            /// Creates a new `AnnouncementResponse`.
            ///
            /// - Parameters:
            ///   - organizationId:
            ///   - memberId:
            ///   - announcementId:
            ///   - title:
            ///   - content:
            ///   - profileImageUrl:
            ///   - placeLinkName:
            ///   - placeLinkUrl:
            ///   - endAt:
            ///   - noticeAt:
            ///   - createdAt:
            ///   - updatedAt:
            public init(
                organizationId: Swift.Int64? = nil,
                memberId: Swift.Int64? = nil,
                announcementId: Swift.Int64? = nil,
                title: Swift.String? = nil,
                content: Swift.String? = nil,
                profileImageUrl: Swift.String? = nil,
                placeLinkName: Swift.String? = nil,
                placeLinkUrl: Swift.String? = nil,
                endAt: Foundation.Date? = nil,
                noticeAt: [Foundation.Date]? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil
            ) {
                self.organizationId = organizationId
                self.memberId = memberId
                self.announcementId = announcementId
                self.title = title
                self.content = content
                self.profileImageUrl = profileImageUrl
                self.placeLinkName = placeLinkName
                self.placeLinkUrl = placeLinkUrl
                self.endAt = endAt
                self.noticeAt = noticeAt
                self.createdAt = createdAt
                self.updatedAt = updatedAt
            }
            public enum CodingKeys: String, CodingKey {
                case organizationId
                case memberId
                case announcementId
                case title
                case content
                case profileImageUrl
                case placeLinkName
                case placeLinkUrl
                case endAt
                case noticeAt
                case createdAt
                case updatedAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseAnnouncementResponse`.
        public struct NofficeResponseAnnouncementResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseAnnouncementResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseAnnouncementResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseAnnouncementResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseAnnouncementResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseAnnouncementResponse/data`.
            public var data: Components.Schemas.AnnouncementResponse?
            /// Creates a new `NofficeResponseAnnouncementResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.AnnouncementResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest`.
        public struct AnnouncementUpdateRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/organizationId`.
            public var organizationId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/memberId`.
            public var memberId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/content`.
            public var content: Swift.String
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/profileImageUrl`.
            public var profileImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/placeLinkName`.
            public var placeLinkName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/placeLinkUrl`.
            public var placeLinkUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/isFaceToFace`.
            public var isFaceToFace: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/tasks`.
            public var tasks: [Components.Schemas.TaskCreateRequest]?
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/endAt`.
            public var endAt: Swift.String
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/noticeBefore`.
            public var noticeBefore: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/AnnouncementUpdateRequest/noticeDate`.
            public var noticeDate: [Swift.String]
            /// Creates a new `AnnouncementUpdateRequest`.
            ///
            /// - Parameters:
            ///   - organizationId:
            ///   - memberId:
            ///   - title:
            ///   - content:
            ///   - profileImageUrl:
            ///   - placeLinkName:
            ///   - placeLinkUrl:
            ///   - isFaceToFace:
            ///   - tasks:
            ///   - endAt:
            ///   - noticeBefore:
            ///   - noticeDate:
            public init(
                organizationId: Swift.Int64,
                memberId: Swift.Int64,
                title: Swift.String,
                content: Swift.String,
                profileImageUrl: Swift.String? = nil,
                placeLinkName: Swift.String? = nil,
                placeLinkUrl: Swift.String? = nil,
                isFaceToFace: Swift.Bool? = nil,
                tasks: [Components.Schemas.TaskCreateRequest]? = nil,
                endAt: Swift.String,
                noticeBefore: [Swift.String],
                noticeDate: [Swift.String]
            ) {
                self.organizationId = organizationId
                self.memberId = memberId
                self.title = title
                self.content = content
                self.profileImageUrl = profileImageUrl
                self.placeLinkName = placeLinkName
                self.placeLinkUrl = placeLinkUrl
                self.isFaceToFace = isFaceToFace
                self.tasks = tasks
                self.endAt = endAt
                self.noticeBefore = noticeBefore
                self.noticeDate = noticeDate
            }
            public enum CodingKeys: String, CodingKey {
                case organizationId
                case memberId
                case title
                case content
                case profileImageUrl
                case placeLinkName
                case placeLinkUrl
                case isFaceToFace
                case tasks
                case endAt
                case noticeBefore
                case noticeDate
            }
        }
        /// - Remark: Generated from `#/components/schemas/TaskModifyRequest`.
        public struct TaskModifyRequest: Codable, Hashable, Sendable {
            /// 투두 항목 ID
            ///
            /// - Remark: Generated from `#/components/schemas/TaskModifyRequest/id`.
            public var id: Swift.Int64
            /// 투두 항목
            ///
            /// - Remark: Generated from `#/components/schemas/TaskModifyRequest/content`.
            public var content: Swift.String
            /// Creates a new `TaskModifyRequest`.
            ///
            /// - Parameters:
            ///   - id: 투두 항목 ID
            ///   - content: 투두 항목
            public init(
                id: Swift.Int64,
                content: Swift.String
            ) {
                self.id = id
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case content
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskModifyResponse`.
        public struct NofficeResponseTaskModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskModifyResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskModifyResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskModifyResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskModifyResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskModifyResponse/data`.
            public var data: Components.Schemas.TaskModifyResponse?
            /// Creates a new `NofficeResponseTaskModifyResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.TaskModifyResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TaskModifyResponse`.
        public struct TaskModifyResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TaskModifyResponse/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TaskModifyResponse/content`.
            public var content: Swift.String?
            /// Creates a new `TaskModifyResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - content:
            public init(
                id: Swift.Int64? = nil,
                content: Swift.String? = nil
            ) {
                self.id = id
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case content
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChangeRoleRequest`.
        public struct ChangeRoleRequest: Codable, Hashable, Sendable {
            /// 변경 적용할 권한
            ///
            /// - Remark: Generated from `#/components/schemas/ChangeRoleRequest/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case ADMIN = "ADMIN"
                case LEADER = "LEADER"
                case PARTICIPANT = "PARTICIPANT"
                case GUEST = "GUEST"
            }
            /// 변경 적용할 권한
            ///
            /// - Remark: Generated from `#/components/schemas/ChangeRoleRequest/role`.
            public var role: Components.Schemas.ChangeRoleRequest.rolePayload
            /// 변경할 대상 멤버 ID 리스트
            ///
            /// - Remark: Generated from `#/components/schemas/ChangeRoleRequest/memberIds`.
            public var memberIds: [Swift.Int64]
            /// Creates a new `ChangeRoleRequest`.
            ///
            /// - Parameters:
            ///   - role: 변경 적용할 권한
            ///   - memberIds: 변경할 대상 멤버 ID 리스트
            public init(
                role: Components.Schemas.ChangeRoleRequest.rolePayload,
                memberIds: [Swift.Int64]
            ) {
                self.role = role
                self.memberIds = memberIds
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case memberIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotificationTimeChangeRequest`.
        public struct NotificationTimeChangeRequest: Codable, Hashable, Sendable {
            /// 공지 ID
            ///
            /// - Remark: Generated from `#/components/schemas/NotificationTimeChangeRequest/announcementId`.
            public var announcementId: Swift.Int64
            /// 알림 시간 변경 초(second)
            ///
            /// - Remark: Generated from `#/components/schemas/NotificationTimeChangeRequest/noticeBefore`.
            public var noticeBefore: [Swift.String]
            /// 알림 시간 변경 기준 일자
            ///
            /// - Remark: Generated from `#/components/schemas/NotificationTimeChangeRequest/noticeDate`.
            public var noticeDate: [Swift.String]
            /// Creates a new `NotificationTimeChangeRequest`.
            ///
            /// - Parameters:
            ///   - announcementId: 공지 ID
            ///   - noticeBefore: 알림 시간 변경 초(second)
            ///   - noticeDate: 알림 시간 변경 기준 일자
            public init(
                announcementId: Swift.Int64,
                noticeBefore: [Swift.String],
                noticeDate: [Swift.String]
            ) {
                self.announcementId = announcementId
                self.noticeBefore = noticeBefore
                self.noticeDate = noticeDate
            }
            public enum CodingKeys: String, CodingKey {
                case announcementId
                case noticeBefore
                case noticeDate
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseNotificationTimeChangeResponse`.
        public struct NofficeResponseNotificationTimeChangeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseNotificationTimeChangeResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseNotificationTimeChangeResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseNotificationTimeChangeResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseNotificationTimeChangeResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseNotificationTimeChangeResponse/data`.
            public var data: Components.Schemas.NotificationTimeChangeResponse?
            /// Creates a new `NofficeResponseNotificationTimeChangeResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.NotificationTimeChangeResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotificationResponse`.
        public struct NotificationResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NotificationResponse/notificationId`.
            public var notificationId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/NotificationResponse/announcementId`.
            public var announcementId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/NotificationResponse/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NotificationResponse/content`.
            public var content: Swift.String?
            /// Creates a new `NotificationResponse`.
            ///
            /// - Parameters:
            ///   - notificationId:
            ///   - announcementId:
            ///   - title:
            ///   - content:
            public init(
                notificationId: Swift.Int64? = nil,
                announcementId: Swift.Int64? = nil,
                title: Swift.String? = nil,
                content: Swift.String? = nil
            ) {
                self.notificationId = notificationId
                self.announcementId = announcementId
                self.title = title
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case notificationId
                case announcementId
                case title
                case content
            }
        }
        /// - Remark: Generated from `#/components/schemas/NotificationTimeChangeResponse`.
        public struct NotificationTimeChangeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NotificationTimeChangeResponse/announcementId`.
            public var announcementId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/NotificationTimeChangeResponse/notifications`.
            public var notifications: [Components.Schemas.NotificationResponse]?
            /// Creates a new `NotificationTimeChangeResponse`.
            ///
            /// - Parameters:
            ///   - announcementId:
            ///   - notifications:
            public init(
                announcementId: Swift.Int64? = nil,
                notifications: [Components.Schemas.NotificationResponse]? = nil
            ) {
                self.announcementId = announcementId
                self.notifications = notifications
            }
            public enum CodingKeys: String, CodingKey {
                case announcementId
                case notifications
            }
        }
        /// - Remark: Generated from `#/components/schemas/Pageable`.
        public struct Pageable: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Pageable/page`.
            public var page: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/Pageable/size`.
            public var size: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/Pageable/sort`.
            public var sort: [Swift.String]?
            /// Creates a new `Pageable`.
            ///
            /// - Parameters:
            ///   - page:
            ///   - size:
            ///   - sort:
            public init(
                page: Swift.Int32? = nil,
                size: Swift.Int32? = nil,
                sort: [Swift.String]? = nil
            ) {
                self.page = page
                self.size = size
                self.sort = sort
            }
            public enum CodingKeys: String, CodingKey {
                case page
                case size
                case sort
            }
        }
        /// - Remark: Generated from `#/components/schemas/AssignedTaskResponse`.
        public struct AssignedTaskResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AssignedTaskResponse/organizationId`.
            public var organizationId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AssignedTaskResponse/organizationName`.
            public var organizationName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AssignedTaskResponse/tasks`.
            public var tasks: [Components.Schemas.TaskResponse]?
            /// Creates a new `AssignedTaskResponse`.
            ///
            /// - Parameters:
            ///   - organizationId:
            ///   - organizationName:
            ///   - tasks:
            public init(
                organizationId: Swift.Int64? = nil,
                organizationName: Swift.String? = nil,
                tasks: [Components.Schemas.TaskResponse]? = nil
            ) {
                self.organizationId = organizationId
                self.organizationName = organizationName
                self.tasks = tasks
            }
            public enum CodingKeys: String, CodingKey {
                case organizationId
                case organizationName
                case tasks
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAssignedTaskResponse`.
        public struct NofficeResponseSliceAssignedTaskResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAssignedTaskResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAssignedTaskResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAssignedTaskResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAssignedTaskResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAssignedTaskResponse/data`.
            public var data: Components.Schemas.SliceAssignedTaskResponse?
            /// Creates a new `NofficeResponseSliceAssignedTaskResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.SliceAssignedTaskResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/PageableObject`.
        public struct PageableObject: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PageableObject/offset`.
            public var offset: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/PageableObject/sort`.
            public var sort: Components.Schemas.SortObject?
            /// - Remark: Generated from `#/components/schemas/PageableObject/unpaged`.
            public var unpaged: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PageableObject/paged`.
            public var paged: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PageableObject/pageNumber`.
            public var pageNumber: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/PageableObject/pageSize`.
            public var pageSize: Swift.Int32?
            /// Creates a new `PageableObject`.
            ///
            /// - Parameters:
            ///   - offset:
            ///   - sort:
            ///   - unpaged:
            ///   - paged:
            ///   - pageNumber:
            ///   - pageSize:
            public init(
                offset: Swift.Int64? = nil,
                sort: Components.Schemas.SortObject? = nil,
                unpaged: Swift.Bool? = nil,
                paged: Swift.Bool? = nil,
                pageNumber: Swift.Int32? = nil,
                pageSize: Swift.Int32? = nil
            ) {
                self.offset = offset
                self.sort = sort
                self.unpaged = unpaged
                self.paged = paged
                self.pageNumber = pageNumber
                self.pageSize = pageSize
            }
            public enum CodingKeys: String, CodingKey {
                case offset
                case sort
                case unpaged
                case paged
                case pageNumber
                case pageSize
            }
        }
        /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse`.
        public struct SliceAssignedTaskResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/first`.
            public var first: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/last`.
            public var last: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/size`.
            public var size: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/content`.
            public var content: [Components.Schemas.AssignedTaskResponse]?
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/number`.
            public var number: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/sort`.
            public var sort: Components.Schemas.SortObject?
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/pageable`.
            public var pageable: Components.Schemas.PageableObject?
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/numberOfElements`.
            public var numberOfElements: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceAssignedTaskResponse/empty`.
            public var empty: Swift.Bool?
            /// Creates a new `SliceAssignedTaskResponse`.
            ///
            /// - Parameters:
            ///   - first:
            ///   - last:
            ///   - size:
            ///   - content:
            ///   - number:
            ///   - sort:
            ///   - pageable:
            ///   - numberOfElements:
            ///   - empty:
            public init(
                first: Swift.Bool? = nil,
                last: Swift.Bool? = nil,
                size: Swift.Int32? = nil,
                content: [Components.Schemas.AssignedTaskResponse]? = nil,
                number: Swift.Int32? = nil,
                sort: Components.Schemas.SortObject? = nil,
                pageable: Components.Schemas.PageableObject? = nil,
                numberOfElements: Swift.Int32? = nil,
                empty: Swift.Bool? = nil
            ) {
                self.first = first
                self.last = last
                self.size = size
                self.content = content
                self.number = number
                self.sort = sort
                self.pageable = pageable
                self.numberOfElements = numberOfElements
                self.empty = empty
            }
            public enum CodingKeys: String, CodingKey {
                case first
                case last
                case size
                case content
                case number
                case sort
                case pageable
                case numberOfElements
                case empty
            }
        }
        /// - Remark: Generated from `#/components/schemas/TaskResponse`.
        public struct TaskResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TaskResponse/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TaskResponse/announcementId`.
            public var announcementId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TaskResponse/content`.
            public var content: Swift.String?
            /// Creates a new `TaskResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - announcementId:
            ///   - content:
            public init(
                id: Swift.Int64? = nil,
                announcementId: Swift.Int64? = nil,
                content: Swift.String? = nil
            ) {
                self.id = id
                self.announcementId = announcementId
                self.content = content
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case announcementId
                case content
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceOrganizationResponse`.
        public struct NofficeResponseSliceOrganizationResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceOrganizationResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceOrganizationResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceOrganizationResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceOrganizationResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceOrganizationResponse/data`.
            public var data: Components.Schemas.SliceOrganizationResponse?
            /// Creates a new `NofficeResponseSliceOrganizationResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.SliceOrganizationResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrganizationResponse`.
        public struct OrganizationResponse: Codable, Hashable, Sendable {
            /// 요청한 사용자의 조직 내 권한
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationResponse/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case ADMIN = "ADMIN"
                case LEADER = "LEADER"
                case PARTICIPANT = "PARTICIPANT"
                case GUEST = "GUEST"
            }
            /// 요청한 사용자의 조직 내 권한
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationResponse/role`.
            public var role: Components.Schemas.OrganizationResponse.rolePayload?
            /// 조직 ID
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationResponse/organizationId`.
            public var organizationId: Swift.Int64
            /// 조직 이름
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationResponse/organizationName`.
            public var organizationName: Swift.String
            /// 프로필 이미지
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationResponse/profileImage`.
            public var profileImage: Swift.String
            /// Creates a new `OrganizationResponse`.
            ///
            /// - Parameters:
            ///   - role: 요청한 사용자의 조직 내 권한
            ///   - organizationId: 조직 ID
            ///   - organizationName: 조직 이름
            ///   - profileImage: 프로필 이미지
            public init(
                role: Components.Schemas.OrganizationResponse.rolePayload? = nil,
                organizationId: Swift.Int64,
                organizationName: Swift.String,
                profileImage: Swift.String
            ) {
                self.role = role
                self.organizationId = organizationId
                self.organizationName = organizationName
                self.profileImage = profileImage
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case organizationId
                case organizationName
                case profileImage
            }
        }
        /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse`.
        public struct SliceOrganizationResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/first`.
            public var first: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/last`.
            public var last: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/size`.
            public var size: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/content`.
            public var content: [Components.Schemas.OrganizationResponse]?
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/number`.
            public var number: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/sort`.
            public var sort: Components.Schemas.SortObject?
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/pageable`.
            public var pageable: Components.Schemas.PageableObject?
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/numberOfElements`.
            public var numberOfElements: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceOrganizationResponse/empty`.
            public var empty: Swift.Bool?
            /// Creates a new `SliceOrganizationResponse`.
            ///
            /// - Parameters:
            ///   - first:
            ///   - last:
            ///   - size:
            ///   - content:
            ///   - number:
            ///   - sort:
            ///   - pageable:
            ///   - numberOfElements:
            ///   - empty:
            public init(
                first: Swift.Bool? = nil,
                last: Swift.Bool? = nil,
                size: Swift.Int32? = nil,
                content: [Components.Schemas.OrganizationResponse]? = nil,
                number: Swift.Int32? = nil,
                sort: Components.Schemas.SortObject? = nil,
                pageable: Components.Schemas.PageableObject? = nil,
                numberOfElements: Swift.Int32? = nil,
                empty: Swift.Bool? = nil
            ) {
                self.first = first
                self.last = last
                self.size = size
                self.content = content
                self.number = number
                self.sort = sort
                self.pageable = pageable
                self.numberOfElements = numberOfElements
                self.empty = empty
            }
            public enum CodingKeys: String, CodingKey {
                case first
                case last
                case size
                case content
                case number
                case sort
                case pageable
                case numberOfElements
                case empty
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationInfoResponse`.
        public struct NofficeResponseOrganizationInfoResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationInfoResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationInfoResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationInfoResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationInfoResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseOrganizationInfoResponse/data`.
            public var data: Components.Schemas.OrganizationInfoResponse?
            /// Creates a new `NofficeResponseOrganizationInfoResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.OrganizationInfoResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse`.
        public struct OrganizationInfoResponse: Codable, Hashable, Sendable {
            /// 요청한 사용자의 조직 내 권한
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/role`.
            @frozen public enum rolePayload: String, Codable, Hashable, Sendable {
                case ADMIN = "ADMIN"
                case LEADER = "LEADER"
                case PARTICIPANT = "PARTICIPANT"
                case GUEST = "GUEST"
            }
            /// 요청한 사용자의 조직 내 권한
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/role`.
            public var role: Components.Schemas.OrganizationInfoResponse.rolePayload?
            /// 조직 ID
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/organizationId`.
            public var organizationId: Swift.Int64
            /// 조직 이름
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/organizationName`.
            public var organizationName: Swift.String
            /// 프로필 이미지
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/profileImage`.
            public var profileImage: Swift.String
            /// 카테고리 리스트
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/categories`.
            public var categories: [Swift.String]
            /// 관리자 사용자 수
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/leaderCount`.
            public var leaderCount: Swift.Int64?
            /// 일반 사용자 수
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/participantCount`.
            public var participantCount: Swift.Int64?
            /// 가입 대기자 여부
            ///
            /// - Remark: Generated from `#/components/schemas/OrganizationInfoResponse/isPending`.
            public var isPending: Swift.Bool?
            /// Creates a new `OrganizationInfoResponse`.
            ///
            /// - Parameters:
            ///   - role: 요청한 사용자의 조직 내 권한
            ///   - organizationId: 조직 ID
            ///   - organizationName: 조직 이름
            ///   - profileImage: 프로필 이미지
            ///   - categories: 카테고리 리스트
            ///   - leaderCount: 관리자 사용자 수
            ///   - participantCount: 일반 사용자 수
            ///   - isPending: 가입 대기자 여부
            public init(
                role: Components.Schemas.OrganizationInfoResponse.rolePayload? = nil,
                organizationId: Swift.Int64,
                organizationName: Swift.String,
                profileImage: Swift.String,
                categories: [Swift.String],
                leaderCount: Swift.Int64? = nil,
                participantCount: Swift.Int64? = nil,
                isPending: Swift.Bool? = nil
            ) {
                self.role = role
                self.organizationId = organizationId
                self.organizationName = organizationName
                self.profileImage = profileImage
                self.categories = categories
                self.leaderCount = leaderCount
                self.participantCount = participantCount
                self.isPending = isPending
            }
            public enum CodingKeys: String, CodingKey {
                case role
                case organizationId
                case organizationName
                case profileImage
                case categories
                case leaderCount
                case participantCount
                case isPending
            }
        }
        /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse`.
        public struct AnnouncementCoverResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/announcementId`.
            public var announcementId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/title`.
            public var title: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/content`.
            public var content: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/profileImageUrl`.
            public var profileImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/placeLinkName`.
            public var placeLinkName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/placeLinkUrl`.
            public var placeLinkUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/endAt`.
            public var endAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/readerCount`.
            public var readerCount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/totalMemberCount`.
            public var totalMemberCount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/createdAt`.
            public var createdAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AnnouncementCoverResponse/updatedAt`.
            public var updatedAt: Foundation.Date?
            /// Creates a new `AnnouncementCoverResponse`.
            ///
            /// - Parameters:
            ///   - announcementId:
            ///   - title:
            ///   - content:
            ///   - profileImageUrl:
            ///   - placeLinkName:
            ///   - placeLinkUrl:
            ///   - endAt:
            ///   - readerCount:
            ///   - totalMemberCount:
            ///   - createdAt:
            ///   - updatedAt:
            public init(
                announcementId: Swift.Int64? = nil,
                title: Swift.String? = nil,
                content: Swift.String? = nil,
                profileImageUrl: Swift.String? = nil,
                placeLinkName: Swift.String? = nil,
                placeLinkUrl: Swift.String? = nil,
                endAt: Foundation.Date? = nil,
                readerCount: Swift.Int64? = nil,
                totalMemberCount: Swift.Int64? = nil,
                createdAt: Foundation.Date? = nil,
                updatedAt: Foundation.Date? = nil
            ) {
                self.announcementId = announcementId
                self.title = title
                self.content = content
                self.profileImageUrl = profileImageUrl
                self.placeLinkName = placeLinkName
                self.placeLinkUrl = placeLinkUrl
                self.endAt = endAt
                self.readerCount = readerCount
                self.totalMemberCount = totalMemberCount
                self.createdAt = createdAt
                self.updatedAt = updatedAt
            }
            public enum CodingKeys: String, CodingKey {
                case announcementId
                case title
                case content
                case profileImageUrl
                case placeLinkName
                case placeLinkUrl
                case endAt
                case readerCount
                case totalMemberCount
                case createdAt
                case updatedAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAnnouncementCoverResponse`.
        public struct NofficeResponseSliceAnnouncementCoverResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAnnouncementCoverResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAnnouncementCoverResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAnnouncementCoverResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAnnouncementCoverResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseSliceAnnouncementCoverResponse/data`.
            public var data: Components.Schemas.SliceAnnouncementCoverResponse?
            /// Creates a new `NofficeResponseSliceAnnouncementCoverResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.SliceAnnouncementCoverResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse`.
        public struct SliceAnnouncementCoverResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/first`.
            public var first: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/last`.
            public var last: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/size`.
            public var size: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/content`.
            public var content: [Components.Schemas.AnnouncementCoverResponse]?
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/number`.
            public var number: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/sort`.
            public var sort: Components.Schemas.SortObject?
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/pageable`.
            public var pageable: Components.Schemas.PageableObject?
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/numberOfElements`.
            public var numberOfElements: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/SliceAnnouncementCoverResponse/empty`.
            public var empty: Swift.Bool?
            /// Creates a new `SliceAnnouncementCoverResponse`.
            ///
            /// - Parameters:
            ///   - first:
            ///   - last:
            ///   - size:
            ///   - content:
            ///   - number:
            ///   - sort:
            ///   - pageable:
            ///   - numberOfElements:
            ///   - empty:
            public init(
                first: Swift.Bool? = nil,
                last: Swift.Bool? = nil,
                size: Swift.Int32? = nil,
                content: [Components.Schemas.AnnouncementCoverResponse]? = nil,
                number: Swift.Int32? = nil,
                sort: Components.Schemas.SortObject? = nil,
                pageable: Components.Schemas.PageableObject? = nil,
                numberOfElements: Swift.Int32? = nil,
                empty: Swift.Bool? = nil
            ) {
                self.first = first
                self.last = last
                self.size = size
                self.content = content
                self.number = number
                self.sort = sort
                self.pageable = pageable
                self.numberOfElements = numberOfElements
                self.empty = empty
            }
            public enum CodingKeys: String, CodingKey {
                case first
                case last
                case size
                case content
                case number
                case sort
                case pageable
                case numberOfElements
                case empty
            }
        }
        /// - Remark: Generated from `#/components/schemas/MemberResponse`.
        public struct MemberResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MemberResponse/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MemberResponse/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MemberResponse/alias`.
            public var alias: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MemberResponse/profileImage`.
            public var profileImage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/MemberResponse/organizations`.
            public var organizations: [Components.Schemas.OrganizationResponse]?
            /// Creates a new `MemberResponse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - alias:
            ///   - profileImage:
            ///   - organizations:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String? = nil,
                alias: Swift.String? = nil,
                profileImage: Swift.String? = nil,
                organizations: [Components.Schemas.OrganizationResponse]? = nil
            ) {
                self.id = id
                self.name = name
                self.alias = alias
                self.profileImage = profileImage
                self.organizations = organizations
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case alias
                case profileImage
                case organizations
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseMemberResponse`.
        public struct NofficeResponseMemberResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseMemberResponse/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseMemberResponse/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseMemberResponse/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseMemberResponse/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseMemberResponse/data`.
            public var data: Components.Schemas.MemberResponse?
            /// Creates a new `NofficeResponseMemberResponse`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.MemberResponse? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContentImagePresignedUrlVO`.
        public struct ContentImagePresignedUrlVO: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContentImagePresignedUrlVO/fileName`.
            public var fileName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContentImagePresignedUrlVO/urls`.
            public struct urlsPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `urlsPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/ContentImagePresignedUrlVO/urls`.
            public var urls: Components.Schemas.ContentImagePresignedUrlVO.urlsPayload?
            /// Creates a new `ContentImagePresignedUrlVO`.
            ///
            /// - Parameters:
            ///   - fileName:
            ///   - urls:
            public init(
                fileName: Swift.String? = nil,
                urls: Components.Schemas.ContentImagePresignedUrlVO.urlsPayload? = nil
            ) {
                self.fileName = fileName
                self.urls = urls
            }
            public enum CodingKeys: String, CodingKey {
                case fileName
                case urls
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryResponses`.
        public struct NofficeResponseCategoryResponses: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryResponses/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryResponses/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryResponses/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryResponses/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseCategoryResponses/data`.
            public var data: Components.Schemas.CategoryResponses?
            /// Creates a new `NofficeResponseCategoryResponses`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.CategoryResponses? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskResponses`.
        public struct NofficeResponseTaskResponses: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskResponses/timestamp`.
            public var timestamp: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskResponses/httpStatus`.
            public var httpStatus: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskResponses/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskResponses/message`.
            public var message: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NofficeResponseTaskResponses/data`.
            public var data: Components.Schemas.TaskResponses?
            /// Creates a new `NofficeResponseTaskResponses`.
            ///
            /// - Parameters:
            ///   - timestamp:
            ///   - httpStatus:
            ///   - code:
            ///   - message:
            ///   - data:
            public init(
                timestamp: Swift.String? = nil,
                httpStatus: Swift.Int32? = nil,
                code: Swift.String? = nil,
                message: Swift.String? = nil,
                data: Components.Schemas.TaskResponses? = nil
            ) {
                self.timestamp = timestamp
                self.httpStatus = httpStatus
                self.code = code
                self.message = message
                self.data = data
            }
            public enum CodingKeys: String, CodingKey {
                case timestamp
                case httpStatus
                case code
                case message
                case data
            }
        }
        /// - Remark: Generated from `#/components/schemas/TaskResponses`.
        public struct TaskResponses: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TaskResponses/tasks`.
            public var tasks: [Components.Schemas.TaskResponse]?
            /// Creates a new `TaskResponses`.
            ///
            /// - Parameters:
            ///   - tasks:
            public init(tasks: [Components.Schemas.TaskResponse]? = nil) {
                self.tasks = tasks
            }
            public enum CodingKeys: String, CodingKey {
                case tasks
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// [인증] 조직 카테고리 수정
    ///
    /// 조직에 등록된 카테고리를 수정합니다.
    ///
    /// - Remark: HTTP `PUT /api/v1/organizations/{organizationId}/categories`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/categories/put(modifyCategories)`.
    public enum modifyCategories {
        public static let id: Swift.String = "modifyCategories"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/path/organizationId`.
                public var organizationId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organizationId:
                public init(organizationId: Swift.Int64) {
                    self.organizationId = organizationId
                }
            }
            public var path: Operations.modifyCategories.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/query/memberId`.
                public var memberId: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - memberId:
                public init(memberId: Swift.Int64) {
                    self.memberId = memberId
                }
            }
            public var query: Operations.modifyCategories.Input.Query
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyCategories.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyCategories.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyCategories.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.CategoryModifyRequest)
            }
            public var body: Operations.modifyCategories.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.modifyCategories.Input.Path,
                query: Operations.modifyCategories.Input.Query,
                headers: Operations.modifyCategories.Input.Headers = .init(),
                body: Operations.modifyCategories.Input.Body
            ) {
                self.path = path
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseCategoryModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseCategoryModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyCategories.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyCategories.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조직 카테고리 수정 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/categories/put(modifyCategories)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyCategories.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyCategories.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/categories/PUT/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseCategoryModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseCategoryModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyCategories.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyCategories.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 조직에 등록된 카테고리가 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/categories/put(modifyCategories)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.modifyCategories.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.modifyCategories.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 사용자의 가입된 조직 페이징 조회
    ///
    /// 멤버가 가입한 조직 목록을 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/get(getJoined)`.
    public enum getJoined {
        public static let id: Swift.String = "getJoined"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/organizations/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/GET/query/pageable`.
                public var pageable: Components.Schemas.Pageable
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - pageable:
                public init(pageable: Components.Schemas.Pageable) {
                    self.pageable = pageable
                }
            }
            public var query: Operations.getJoined.Input.Query
            /// - Remark: Generated from `#/paths/api/v1/organizations/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getJoined.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getJoined.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getJoined.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getJoined.Input.Query,
                headers: Operations.getJoined.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseSliceOrganizationResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseSliceOrganizationResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getJoined.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getJoined.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 회원의 가입된 조직 조회에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/get(getJoined)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getJoined.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getJoined.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseSliceOrganizationResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseSliceOrganizationResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getJoined.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getJoined.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 가입된 조직이 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/get(getJoined)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getJoined.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getJoined.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 조직 생성
    ///
    /// 조직을 생성합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/organizations`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/post(create)`.
    public enum create {
        public static let id: Swift.String = "create"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/organizations/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.create.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.create.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.create.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/organizations/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.OrganizationCreateRequest)
            }
            public var body: Operations.create.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.create.Input.Headers = .init(),
                body: Operations.create.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseOrganizationCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseOrganizationCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.create.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.create.Output.Created.Body) {
                    self.body = body
                }
            }
            /// 조직 생성에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/post(create)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.create.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.create.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseOrganizationCreateResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseOrganizationCreateResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.create.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.create.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 조직 생성에 실패하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/post(create)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.create.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.create.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 조직 가입
    ///
    /// 조직에 가입합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/organizations/{organizationId}/join`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/join/post(join)`.
    public enum join {
        public static let id: Swift.String = "join"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/join/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/join/POST/path/organizationId`.
                public var organizationId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organizationId:
                public init(organizationId: Swift.Int64) {
                    self.organizationId = organizationId
                }
            }
            public var path: Operations.join.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/join/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.join.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.join.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.join.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.join.Input.Path,
                headers: Operations.join.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/join/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/join/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseOrganizationJoinResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseOrganizationJoinResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.join.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.join.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조직 가입에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/join/post(join)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.join.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.join.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 사용자에게 수신된 알림 조회
    ///
    /// 사용자에게 수신된 알림을 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/get(findById)`.
    public enum findById {
        public static let id: Swift.String = "findById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/notifications/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.findById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.findById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.findById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.findById.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.findById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.findById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 알림 조회 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/get(findById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.findById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.findById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.findById.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.findById.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 알림이 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/get(findById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.findById.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.findById.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 단일 사용자 알림 대기열 추가
    ///
    /// 단일 사용자를 특정하여 노티 알림 대기열에 등록합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/post(create_1)`.
    public enum create_1 {
        public static let id: Swift.String = "create_1"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/notifications/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.create_1.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.create_1.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.create_1.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/notifications/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.NotificationRequest)
            }
            public var body: Operations.create_1.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.create_1.Input.Headers = .init(),
                body: Operations.create_1.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.create_1.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.create_1.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 알림 대기열 등록 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/post(create_1)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.create_1.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.create_1.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.create_1.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.create_1.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 알림 발송 실패
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/post(create_1)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.create_1.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.create_1.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 알림 발송 시간 변경
    ///
    /// 노티 알림 발송 시간을 변경합니다.
    ///
    /// - Remark: HTTP `PATCH /api/v1/notifications`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/patch(changeSendTime)`.
    public enum changeSendTime {
        public static let id: Swift.String = "changeSendTime"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/notifications/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changeSendTime.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changeSendTime.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.changeSendTime.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/notifications/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.NotificationTimeChangeRequest)
            }
            public var body: Operations.changeSendTime.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.changeSendTime.Input.Headers = .init(),
                body: Operations.changeSendTime.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseNotificationTimeChangeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseNotificationTimeChangeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changeSendTime.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changeSendTime.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 알림 발송 시간 변경 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/patch(changeSendTime)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.changeSendTime.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.changeSendTime.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseNotificationTimeChangeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseNotificationTimeChangeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changeSendTime.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changeSendTime.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 알림 발송 시간 변경 실패
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/patch(changeSendTime)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.changeSendTime.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.changeSendTime.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 조직 단위 알림 대량 발송
    ///
    /// 조직 내 모든 사용자에게 전체 발송되는 알림을 등록합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/notifications/bulk`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/bulk/post(createAll)`.
    public enum createAll {
        public static let id: Swift.String = "createAll"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/notifications/bulk/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createAll.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createAll.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createAll.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/notifications/bulk/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/bulk/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.NotificationBulkRequest)
            }
            public var body: Operations.createAll.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createAll.Input.Headers = .init(),
                body: Operations.createAll.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/bulk/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/bulk/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createAll.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createAll.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조직 전체 알림 대량 등록 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/bulk/post(createAll)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createAll.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createAll.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/bulk/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/bulk/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createAll.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createAll.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 조직 전체 알림 대량 등록 실패
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/bulk/post(createAll)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.createAll.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.createAll.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 토큰 재발급
    ///
    /// 리프레시 토큰을 이용해 새로운 액세스 토큰을 발급합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/member/reissue`.
    /// - Remark: Generated from `#/paths//api/v1/member/reissue/post(reissue)`.
    public enum reissue {
        public static let id: Swift.String = "reissue"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/member/reissue/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.reissue.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.reissue.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.reissue.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.reissue.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/member/reissue/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/member/reissue/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.reissue.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.reissue.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 액세스 토큰 재발급에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/member/reissue/post(reissue)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.reissue.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.reissue.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 회원 로그인
    ///
    /// 본문에 소셜 공급자명과 인가코드를 넣어 노피스 서버 로그인을 시도합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/member/login`.
    /// - Remark: Generated from `#/paths//api/v1/member/login/post(login)`.
    public enum login {
        public static let id: Swift.String = "login"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/member/login/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.login.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.login.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.login.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/member/login/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/member/login/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SocialAuthRequest)
            }
            public var body: Operations.login.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.login.Input.Headers = .init(),
                body: Operations.login.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/member/login/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/member/login/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseSocialAuthResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseSocialAuthResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.login.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.login.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 로그인에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/member/login/post(login)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.login.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.login.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 컨텐츠 이미지 업로드 위치 요청
    ///
    /// fileType에는 확장자를, fileName은 파일명을 넣어주세요. imageType은 이미지 유형을 명시해주세요.
    ///
    /// - Remark: HTTP `GET /api/v1/image`.
    /// - Remark: Generated from `#/paths//api/v1/image/get(getContentImage)`.
    public enum getContentImage {
        public static let id: Swift.String = "getContentImage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/image/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/image/GET/query/fileType`.
                public var fileType: Swift.String
                /// - Remark: Generated from `#/paths/api/v1/image/GET/query/fileName`.
                public var fileName: Swift.String
                /// - Remark: Generated from `#/paths/api/v1/image/GET/query/imagePurpose`.
                @frozen public enum imagePurposePayload: String, Codable, Hashable, Sendable {
                    case ORGANIZATION_LOGO = "ORGANIZATION_LOGO"
                    case MEMBER_PROFILE = "MEMBER_PROFILE"
                    case ANNOUNCEMENT_PROFILE = "ANNOUNCEMENT_PROFILE"
                    case ANNOUNCEMENT_CONTENT = "ANNOUNCEMENT_CONTENT"
                    case PROMOTION_COVER = "PROMOTION_COVER"
                }
                /// - Remark: Generated from `#/paths/api/v1/image/GET/query/imagePurpose`.
                public var imagePurpose: Operations.getContentImage.Input.Query.imagePurposePayload
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - fileType:
                ///   - fileName:
                ///   - imagePurpose:
                public init(
                    fileType: Swift.String,
                    fileName: Swift.String,
                    imagePurpose: Operations.getContentImage.Input.Query.imagePurposePayload
                ) {
                    self.fileType = fileType
                    self.fileName = fileName
                    self.imagePurpose = imagePurpose
                }
            }
            public var query: Operations.getContentImage.Input.Query
            /// - Remark: Generated from `#/paths/api/v1/image/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getContentImage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getContentImage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getContentImage.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getContentImage.Input.Query,
                headers: Operations.getContentImage.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/image/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/image/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContentImagePresignedUrlVO)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ContentImagePresignedUrlVO {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getContentImage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getContentImage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 이미지 업로드 위치 요청에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/image/get(getContentImage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getContentImage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getContentImage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 컨텐츠 이미지 업로드 완료
    ///
    /// 컨텐츠 이미지 업로드 완료를 노피스 서버에 알립니다.
    ///
    /// - Remark: HTTP `POST /api/v1/image`.
    /// - Remark: Generated from `#/paths//api/v1/image/post(notifyContentImageSaveSuccess)`.
    public enum notifyContentImageSaveSuccess {
        public static let id: Swift.String = "notifyContentImageSaveSuccess"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/image/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/image/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.NotifyContentImageSaveSuccessRequest)
            }
            public var body: Operations.notifyContentImageSaveSuccess.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - body:
            public init(body: Operations.notifyContentImageSaveSuccess.Input.Body) {
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// 별도 파일을 제외한 POST 요청을 발송해주세요.
            ///
            /// - Remark: Generated from `#/paths//api/v1/image/post(notifyContentImageSaveSuccess)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.notifyContentImageSaveSuccess.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.notifyContentImageSaveSuccess.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// 노티 생성
    ///
    /// 노티를 생성합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/announcement`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/post(create_2)`.
    public enum create_2 {
        public static let id: Swift.String = "create_2"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/announcement/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.create_2.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.create_2.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.create_2.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/announcement/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AnnouncementCreateRequest)
            }
            public var body: Operations.create_2.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.create_2.Input.Headers = .init(),
                body: Operations.create_2.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseAnnouncementResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseAnnouncementResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.create_2.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.create_2.Output.Created.Body) {
                    self.body = body
                }
            }
            /// 노티 생성 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/post(create_2)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.create_2.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.create_2.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/POST/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/POST/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseAnnouncementResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseAnnouncementResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.create_2.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.create_2.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 노티 생성 실패
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/post(create_2)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.create_2.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.create_2.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 조직에 발급된 노티 열람
    ///
    /// 열람하려는 노티를 조회하고, 열람 기록에 추가합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/get(read)`.
    public enum read {
        public static let id: Swift.String = "read"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/GET/path/announcementId`.
                public var announcementId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - announcementId:
                public init(announcementId: Swift.Int64) {
                    self.announcementId = announcementId
                }
            }
            public var path: Operations.read.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.read.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.read.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.read.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.read.Input.Path,
                headers: Operations.read.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseAnnouncementResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseAnnouncementResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.read.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.read.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 노티 단일 조회 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/get(read)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.read.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.read.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseAnnouncementResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseAnnouncementResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.read.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.read.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 해당 노티가 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/get(read)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.read.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.read.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 노티 수정
    ///
    /// 노티를 수정합니다.
    ///
    /// - Remark: HTTP `POST /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/post(update)`.
    public enum update {
        public static let id: Swift.String = "update"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/path/announcementId`.
                public var announcementId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - announcementId:
                public init(announcementId: Swift.Int64) {
                    self.announcementId = announcementId
                }
            }
            public var path: Operations.update.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.update.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.update.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.update.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AnnouncementUpdateRequest)
            }
            public var body: Operations.update.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.update.Input.Path,
                headers: Operations.update.Input.Headers = .init(),
                body: Operations.update.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseAnnouncementResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseAnnouncementResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.update.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.update.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 노티 수정 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/post(update)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.update.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.update.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/POST/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseAnnouncementResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseAnnouncementResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.update.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.update.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 해당 노티가 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/post(update)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.update.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.update.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 노티 삭제
    ///
    /// 노티를 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/announcement/{announcementId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/delete(delete_1)`.
    public enum delete_1 {
        public static let id: Swift.String = "delete_1"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/DELETE/path/announcementId`.
                public var announcementId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - announcementId:
                public init(announcementId: Swift.Int64) {
                    self.announcementId = announcementId
                }
            }
            public var path: Operations.delete_1.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.delete_1.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.delete_1.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.delete_1.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.delete_1.Input.Path,
                headers: Operations.delete_1.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/DELETE/responses/204/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/DELETE/responses/204/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.delete_1.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.delete_1.Output.NoContent.Body) {
                    self.body = body
                }
            }
            /// 노티 삭제 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/delete(delete_1)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.delete_1.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.delete_1.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.delete_1.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.delete_1.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 노티 삭제에 실패하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/delete(delete_1)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.delete_1.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.delete_1.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 투두 수정
    ///
    /// - Remark: HTTP `PATCH /api/v1/tasks`.
    /// - Remark: Generated from `#/paths//api/v1/tasks/patch(modify)`.
    public enum modify {
        public static let id: Swift.String = "modify"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/tasks/PATCH/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/tasks/PATCH/query/taskModifyRequest`.
                public var taskModifyRequest: Components.Schemas.TaskModifyRequest
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - taskModifyRequest:
                public init(taskModifyRequest: Components.Schemas.TaskModifyRequest) {
                    self.taskModifyRequest = taskModifyRequest
                }
            }
            public var query: Operations.modify.Input.Query
            /// - Remark: Generated from `#/paths/api/v1/tasks/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modify.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modify.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modify.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.modify.Input.Query,
                headers: Operations.modify.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/tasks/PATCH/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/tasks/PATCH/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseTaskModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseTaskModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modify.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modify.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 투두 수정 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/tasks/patch(modify)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modify.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modify.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/tasks/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/tasks/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseTaskModifyResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseTaskModifyResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modify.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modify.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 투두 수정 실패
            ///
            /// - Remark: Generated from `#/paths//api/v1/tasks/patch(modify)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.modify.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.modify.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 조직원 권한 변경
    ///
    /// 타겟에 해당하는 멤버의 조직 내 권한을 입력한 권한대로 변경합니다.
    ///
    /// - Remark: HTTP `PATCH /api/v1/organizations/{organizationId}/roles`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/roles/patch(changeRoles)`.
    public enum changeRoles {
        public static let id: Swift.String = "changeRoles"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/path/organizationId`.
                public var organizationId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organizationId:
                public init(organizationId: Swift.Int64) {
                    self.organizationId = organizationId
                }
            }
            public var path: Operations.changeRoles.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changeRoles.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changeRoles.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.changeRoles.Input.Headers
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/requestBody/content/application\/json`.
                case json(Components.Schemas.ChangeRoleRequest)
            }
            public var body: Operations.changeRoles.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.changeRoles.Input.Path,
                headers: Operations.changeRoles.Input.Headers = .init(),
                body: Operations.changeRoles.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/responses/204/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/responses/204/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changeRoles.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changeRoles.Output.NoContent.Body) {
                    self.body = body
                }
            }
            /// 권한 변경에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/roles/patch(changeRoles)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.changeRoles.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.changeRoles.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changeRoles.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changeRoles.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 권한 변경에 실패하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/roles/patch(changeRoles)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.changeRoles.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.changeRoles.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/responses/403/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changeRoles.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changeRoles.Output.Forbidden.Body) {
                    self.body = body
                }
            }
            /// 요청을 수행할 수 있는 권한이 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/roles/patch(changeRoles)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.changeRoles.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.changeRoles.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/roles/PATCH/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changeRoles.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changeRoles.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 조직원이 존재하지 않습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/roles/patch(changeRoles)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.changeRoles.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.changeRoles.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 사용자 할당 투두 목록 조회
    ///
    /// - Remark: HTTP `GET /api/v1/tasks/assigned`.
    /// - Remark: Generated from `#/paths//api/v1/tasks/assigned/get(getAssigned)`.
    public enum getAssigned {
        public static let id: Swift.String = "getAssigned"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/tasks/assigned/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/tasks/assigned/GET/query/pageable`.
                public var pageable: Components.Schemas.Pageable
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - pageable:
                public init(pageable: Components.Schemas.Pageable) {
                    self.pageable = pageable
                }
            }
            public var query: Operations.getAssigned.Input.Query
            /// - Remark: Generated from `#/paths/api/v1/tasks/assigned/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAssigned.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAssigned.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAssigned.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAssigned.Input.Query,
                headers: Operations.getAssigned.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/tasks/assigned/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/tasks/assigned/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseSliceAssignedTaskResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseSliceAssignedTaskResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAssigned.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAssigned.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 사용자 할당 투두 조회 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/tasks/assigned/get(getAssigned)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAssigned.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAssigned.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/tasks/assigned/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/tasks/assigned/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseSliceAssignedTaskResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseSliceAssignedTaskResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAssigned.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAssigned.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 사용자 할당된 투두가 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/tasks/assigned/get(getAssigned)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getAssigned.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getAssigned.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 단일 조직 정보 조회
    ///
    /// 조직의 정보(조직명, 가입 대기여부, 가입자수) 를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations/{organizationId}`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/get(getInformation)`.
    public enum getInformation {
        public static let id: Swift.String = "getInformation"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/GET/path/organizationId`.
                public var organizationId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organizationId:
                public init(organizationId: Swift.Int64) {
                    self.organizationId = organizationId
                }
            }
            public var path: Operations.getInformation.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInformation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInformation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getInformation.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getInformation.Input.Path,
                headers: Operations.getInformation.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseOrganizationInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseOrganizationInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getInformation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getInformation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조직 정보 조회에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/get(getInformation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getInformation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getInformation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseOrganizationInfoResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseOrganizationInfoResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getInformation.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getInformation.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 조직 정보가 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/get(getInformation)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getInformation.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getInformation.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 조직별 노티 페이징 조회
    ///
    /// 조직별 노티를 페이징 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/organizations/{organizationId}/announcements`.
    /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/announcements/get(getPublishedAnnouncements)`.
    public enum getPublishedAnnouncements {
        public static let id: Swift.String = "getPublishedAnnouncements"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/path/organizationId`.
                public var organizationId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - organizationId:
                public init(organizationId: Swift.Int64) {
                    self.organizationId = organizationId
                }
            }
            public var path: Operations.getPublishedAnnouncements.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/query/pageable`.
                public var pageable: Components.Schemas.Pageable
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - pageable:
                public init(pageable: Components.Schemas.Pageable) {
                    self.pageable = pageable
                }
            }
            public var query: Operations.getPublishedAnnouncements.Input.Query
            /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPublishedAnnouncements.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPublishedAnnouncements.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPublishedAnnouncements.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getPublishedAnnouncements.Input.Path,
                query: Operations.getPublishedAnnouncements.Input.Query,
                headers: Operations.getPublishedAnnouncements.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseSliceAnnouncementCoverResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseSliceAnnouncementCoverResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPublishedAnnouncements.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPublishedAnnouncements.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 조직별 노티 페이징 조회 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/announcements/get(getPublishedAnnouncements)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPublishedAnnouncements.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getPublishedAnnouncements.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/organizations/{organizationId}/announcements/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseSliceAnnouncementCoverResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseSliceAnnouncementCoverResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPublishedAnnouncements.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPublishedAnnouncements.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 조직에 등록된 노티가 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/organizations/{organizationId}/announcements/get(getPublishedAnnouncements)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getPublishedAnnouncements.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getPublishedAnnouncements.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 단일 회원 정보 조회
    ///
    /// 회원의 정보를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/member`.
    /// - Remark: Generated from `#/paths//api/v1/member/get(getById)`.
    public enum getById {
        public static let id: Swift.String = "getById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/member/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getById.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/member/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/member/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseMemberResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseMemberResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 회원 정보 조회에 성공하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/member/get(getById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 서버 상태 확인
    ///
    /// 정상 동작시 200 반환합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/health`.
    /// - Remark: Generated from `#/paths//api/v1/health/get(health)`.
    public enum health {
        public static let id: Swift.String = "health"
        public struct Input: Sendable, Hashable {
            /// Creates a new `Input`.
            public init() {}
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//api/v1/health/get(health)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.health.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.health.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
    }
    /// 전체 카테고리 조회
    ///
    /// 등록 가능한 모든 카테고리를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/category`.
    /// - Remark: Generated from `#/paths//api/v1/category/get(getCategories)`.
    public enum getCategories {
        public static let id: Swift.String = "getCategories"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/category/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCategories.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCategories.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getCategories.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getCategories.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/category/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/category/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseCategoryResponses)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseCategoryResponses {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getCategories.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getCategories.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 카테고리 목록 조회 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/category/get(getCategories)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCategories.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getCategories.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/category/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/category/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseCategoryResponses)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseCategoryResponses {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getCategories.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getCategories.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 등록된 카테고리가 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/category/get(getCategories)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getCategories.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getCategories.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// [인증] 노티에 발급된 투두 조회
    ///
    /// 노티에 발급된 투두를 조회합니다.
    ///
    /// - Remark: HTTP `GET /api/v1/announcement/{announcementId}/tasks`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/get(getTasksById)`.
    public enum getTasksById {
        public static let id: Swift.String = "getTasksById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/GET/path/announcementId`.
                public var announcementId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - announcementId:
                public init(announcementId: Swift.Int64) {
                    self.announcementId = announcementId
                }
            }
            public var path: Operations.getTasksById.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTasksById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTasksById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getTasksById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getTasksById.Input.Path,
                headers: Operations.getTasksById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseTaskResponses)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseTaskResponses {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTasksById.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTasksById.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// 노티에 발급된 투두 조회 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/get(getTasksById)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getTasksById.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getTasksById.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/GET/responses/404/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseTaskResponses)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseTaskResponses {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTasksById.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTasksById.Output.NotFound.Body) {
                    self.body = body
                }
            }
            /// 노티에 발급된 투두가 없습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/get(getTasksById)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.getTasksById.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.getTasksById.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 알림 삭제
    ///
    /// 노티 알림을 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/notifications/{notificationId}`.
    /// - Remark: Generated from `#/paths//api/v1/notifications/{notificationId}/delete(delete)`.
    public enum delete {
        public static let id: Swift.String = "delete"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/notifications/{notificationId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/{notificationId}/DELETE/path/notificationId`.
                public var notificationId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - notificationId:
                public init(notificationId: Swift.Int64) {
                    self.notificationId = notificationId
                }
            }
            public var path: Operations.delete.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/notifications/{notificationId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.delete.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.delete.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.delete.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.delete.Input.Path,
                headers: Operations.delete.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/{notificationId}/DELETE/responses/204/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/{notificationId}/DELETE/responses/204/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.delete.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.delete.Output.NoContent.Body) {
                    self.body = body
                }
            }
            /// 알림 삭제 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/{notificationId}/delete(delete)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.delete.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.delete.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/notifications/{notificationId}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/notifications/{notificationId}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.delete.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.delete.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 알림 삭제 실패
            ///
            /// - Remark: Generated from `#/paths//api/v1/notifications/{notificationId}/delete(delete)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.delete.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.delete.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// 노티에 발급된 투두 삭제
    ///
    /// 노티에 발급된 투두를 삭제합니다.
    ///
    /// - Remark: HTTP `DELETE /api/v1/announcement/{announcementId}/tasks/{taskId}`.
    /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/{taskId}/delete(deleteTaskById)`.
    public enum deleteTaskById {
        public static let id: Swift.String = "deleteTaskById"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/{taskId}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/{taskId}/DELETE/path/announcementId`.
                public var announcementId: Swift.Int64
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/{taskId}/DELETE/path/taskId`.
                public var taskId: Swift.Int64
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - announcementId:
                ///   - taskId:
                public init(
                    announcementId: Swift.Int64,
                    taskId: Swift.Int64
                ) {
                    self.announcementId = announcementId
                    self.taskId = taskId
                }
            }
            public var path: Operations.deleteTaskById.Input.Path
            /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/{taskId}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteTaskById.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteTaskById.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteTaskById.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.deleteTaskById.Input.Path,
                headers: Operations.deleteTaskById.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/{taskId}/DELETE/responses/204/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/{taskId}/DELETE/responses/204/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteTaskById.Output.NoContent.Body
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteTaskById.Output.NoContent.Body) {
                    self.body = body
                }
            }
            /// 노티에 발급된 투두 삭제 성공
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/{taskId}/delete(deleteTaskById)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.deleteTaskById.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.deleteTaskById.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct BadRequest: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/{taskId}/DELETE/responses/400/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/v1/announcement/{announcementId}/tasks/{taskId}/DELETE/responses/400/content/application\/json`.
                    case json(Components.Schemas.NofficeResponseVoid)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NofficeResponseVoid {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteTaskById.Output.BadRequest.Body
                /// Creates a new `BadRequest`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteTaskById.Output.BadRequest.Body) {
                    self.body = body
                }
            }
            /// 노티에 발급된 투두 삭제에 실패하였습니다.
            ///
            /// - Remark: Generated from `#/paths//api/v1/announcement/{announcementId}/tasks/{taskId}/delete(deleteTaskById)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Operations.deleteTaskById.Output.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            public var badRequest: Operations.deleteTaskById.Output.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
