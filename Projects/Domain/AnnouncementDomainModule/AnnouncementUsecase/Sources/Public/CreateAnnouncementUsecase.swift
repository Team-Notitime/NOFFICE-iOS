//
//  CreateAnnouncementUsecase.swift
//  AnnouncementUsecase
//
//  Created by DOYEON LEE on 8/19/24.
//

import AnnouncementDataInterface
import AnnouncementEntity
import Container
import Foundation
import RxSwift
import Swinject
import UserDefaultsUtility

public struct CreateAnnouncementUsecase {
    // MARK: DTO

    public struct Input {
        let newAnnouncement: NewAnnouncementEntity
        
        public init(
            newAnnouncement: NewAnnouncementEntity
        ) {
            self.newAnnouncement = newAnnouncement
        }
    }
    
    public struct Output {
        public let announcementId: Int
    }
    
    // MARK: Dependency

    let announcementRepository = Container.shared
        .resolve(AnnouncementRepositoryInterface.self)!
    
    let memberUserDefaultsManager = UserDefaultsManager<Member>()
    
    // MARK: Initializer
    public init() {}
    
    // MARK: Execute method
    public func execute(_ input: Input) -> Observable<Output> {
        let newAnnouncement = input.newAnnouncement
        
        // endAt이 nil이면 한 달 뒤의 날짜로 설정
        let autoGeneratedEndAt = Calendar.current
            .date(byAdding: .month, value: 1, to: Date())!

        let (noticeBefore, noticeDate) = (newAnnouncement.notifications ?? [])
            .reduce(into: ([Date](), [Date]())) { result, notification in
                switch notification {
                case let .before(timeInterval):
                    let date = Date().addingTimeInterval(-timeInterval)
                    result.0.append(date)

                case let .custom(date):
                    result.1.append(date)
                }
            }

        if let member = memberUserDefaultsManager.get() {
            return announcementRepository
                .createAnnouncement(
                    .init(
                        organizationId: newAnnouncement.organizationId,
                        memberId: member.id,
                        title: newAnnouncement.title,
                        content: newAnnouncement.body,
                        tasks: (newAnnouncement.todos ?? []).map {
                            .init(content: $0)
                        },
                        endAt: newAnnouncement.endAt ?? autoGeneratedEndAt,
                        noticeBefore: noticeBefore,
                        noticeDate: noticeDate
                    )
                )
                .map { result in
                    let announcementId = Int(result.announcementId ?? 0)
                    return Output(announcementId: announcementId)
                }
            
        } else {
            fatalError("해당 유즈케이스는 로그인 상태에서 실행되어야합니다.")
        }
    }
}
